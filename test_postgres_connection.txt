import yaml
from sqlalchemy import create_engine, text, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.yaml"""
    try:
        with open('config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
            return config
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.yaml: {e}")
        return None

config = load_config()
DATABASE_URL = config['database']['url']
engine = create_engine(DATABASE_URL, echo=True)
Base = declarative_base()

class TestTable(Base):
    __tablename__ = 'test_table'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(100), nullable=False)
    description = Column(String(255))
    created_at = Column(DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f"<TestTable(id={self.id}, name='{self.name}', description='{self.description}')>"

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.connect() as connection:
            result = connection.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
            print(f"–í–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {version}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_test_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É test_table"""
    try:
        Base.metadata.create_all(engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ test_table —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

def insert_test_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        Session = sessionmaker(bind=engine)
        session = Session()

        test_data = [
            TestTable(
                name="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å 1",
                description="–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã SQLAlchemy"
            ),
            TestTable(
                name="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å 2", 
                description="–≠—Ç–æ –≤—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
            )
        ]

        session.add_all(test_data)
        session.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(test_data)}")

        session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def read_test_data():
    """–ß–∏—Ç–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        Session = sessionmaker(bind=engine)
        session = Session()
        records = session.query(TestTable).all()
        
        print(f"\nüìã –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã test_table (–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}):")
        print("-" * 80)        
        for record in records:
            print(f"ID: {record.id}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {record.name}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {record.description}")
            print(f"–°–æ–∑–¥–∞–Ω–æ: {record.created_at}")
            print("-" * 80)

        session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy")
    print("=" * 80)
    if not test_database_connection():
        return
        
    print("\n" + "=" * 80)
    if not create_test_table():
        return
    
    print("\n" + "=" * 80)
    if not insert_test_data():
        return
    
    print("\n" + "=" * 80)
    if not read_test_data():
        return
    
    print("\n" + "=" * 80)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å SQLAlchemy")

if __name__ == "__main__":
    main()
